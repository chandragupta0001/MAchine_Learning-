# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T5Ddd_kww0Ulse0MuNFqxK2TKQjsXHwB
"""

import numpy as np
import keras
import matplotlib.pyplot as plt
from keras.datasets import mnist
from keras.models import Model
from keras.layers import Dense, Input
from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten
from keras import backend as k
(x_train, y_train), (x_test, y_test) = mnist.load_data()
rows, columns=28, 28


from google.colab import files
uploaded = files.upload()
import numpy as np
import pandas as pd

from sklearn.model_selection import train_test_split
import io

# x_train = np.load(io.BytesIO(uploaded['x_train.npy']))
# x_test = pd.read_npy(io.BytesIO(uploaded['x_test.npy']))
# y_train = pd.read_npy(io.BytesIO(uploaded['y_train.npy']))
# y_test = pd.read_npy(io.BytesIO(uploaded['y_test.npy']))

# if k.image_data_format() == 'channels_first':
#   x_train = x_train.reshape(x_train.shape[0], 1, rows, columns)
#   x_test = x_test.reshape(x_test.shape[0], 1, rows, columns)
#   inpx = (1, rows, columns)

x_train = x_train.reshape(x_train.shape[0], rows, columns, 1)
x_test = x_test.reshape(x_test.shape[0], rows, columns, 1)
inpx = (rows, columns, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)
inpx = Input(shape=inpx)
layer1 = Conv2D(32, kernel_size=(3, 3), activation='tanh')(inpx)
layer2 = Conv2D(64, (3, 3), activation='tanh')(layer1)
layer3 = MaxPooling2D(pool_size=(3, 3))(layer2)
layer4 = Dropout(0.5)(layer3)
layer5 = Flatten()(layer4)
layer6 = Dense(250, activation='sigmoid')(layer5)
layer7 = Dense(10, activation='softmax')(layer6)
model = Model([inpx], layer7)
model.compile(optimizer=keras.optimizers.Adadelta(),loss=keras.losses.categorical_crossentropy,metrics=['accuracy'])
loss=np.empty(0)
accur=np.empty(0)
e=np.empty(0)
for epoch in range(5):
 model.fit(x_train, y_train, epochs=epoch, batch_size=5000)
 score = model.evaluate(x_test, y_test, verbose=0)
 loss=np.append(loss,score[0])
 accur=np.append(accur,score[1])
 e=np.append(e,epoch)


plt.plot(e, loss, label='Loss')
plt.plot(e, accur, label='Accuracy')
plt.xlabel('loss and acc.')
plt.ylabel('Epochs')
plt.title('Loss & accuracy vs Epoch')
plt.legend()
plt.show()


# accu = np.empty(0)
# print('loss=', score[0])
# print('accuracy=', score[1])
# np.append(accu, score[1])
# print(accu)

