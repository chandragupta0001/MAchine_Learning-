# -*- coding: utf-8 -*-
"""SVM_heart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10fdVNj78QNN0-A_Qir8jFezPUCATNt1D
"""

from google.colab import files
uploaded = files.upload()
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt 
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
import io


train = pd.read_csv(io.BytesIO(uploaded['train.csv']))
test = pd.read_csv(io.BytesIO(uploaded['test.csv']))
x_train = train.drop(['target'], axis = 1)
y_train = train['target']

x_test = test.drop(['target'], axis = 1)
y_test = test['target']

print(train)
print(test)


from numpy import array
from numpy import mean
from numpy import cov
from numpy.linalg import eig
data = pd.read_csv(io.BytesIO(uploaded['heart.csv']))


A = data.iloc[:, 0:-1].values
T= data.iloc[:,-1].values
print(A)
print(data)

M = np.mean(A.T, axis = 1)

C = A-M

V = cov(C.T)


# eigendecomposition of covariance matrix
values, vectors = eig(V)
print(np.shape(vectors))
# project data
P = vectors.T.dot(C.T)
Z = P.T

plot_data = np.copy(Z[:, 0:2])
principalDf = pd.DataFrame(data = plot_data, columns = ['principal_component_1', 'principal_component_2'])

plt.scatter(principalDf.principal_component_1, principalDf.principal_component_2, c = T)

plt.xlabel('principal component 1')
plt.ylabel('principal component 2')
plt.show()


svclassifier = SVC(kernel='linear')
svclassifier.fit(x_train, y_train)

y_pred = svclassifier.predict(x_test)
print(y_pred)

from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))